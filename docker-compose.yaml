services:
  auth-service:
    build: 
      context: ./apps/auth_service
      dockerfile: local.Dockerfile
    volumes:
      - ./apps/auth_service:/app  
    ports:
      - 8000:8000
    env_file:
      - .env.dev
    depends_on:
      - mysql
    environment:
      - PYTHONDONTWRITEBYTECODE=1
  

  # post-service:
  #   build: ./services/post-service
  #   ports:
  #     - 3001:3000
  #   env_file:
  #     - .env.dev
  #   depends_on:
  #     - mongodb

  # frontend:
  #   build: ./frontend
  #   ports:
  #     - 3000:3000
  #   env_file:
  #     - .env.dev

  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: auth
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
    ports: 
     - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  post-service:
    build:
      context: ./apps/post-service
      dockerfile: local.Dockerfile
    container_name: post-service
    volumes:
      - ./apps/post-service:/app
      - /app/node_modules  # node_modulesのキャッシュを防ぐ
    ports:
      - "4000:3000"
    environment:
      - DATABASE_URL=postgresql://admin:password@postgres:5432/post
    depends_on:
      - postgres
    command: npm run dev

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: post
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  emotion-service:
    build:
      context: ./apps/emotion-service
      dockerfile: local.Dockerfile
    container_name: emotion-service
    ports:
      - "8080:8080"
    volumes:
      - ./apps/emotion-service:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379" 

  # mongodb:
  #   image: mongo

volumes:
  mysql_data:
  postgres_data:

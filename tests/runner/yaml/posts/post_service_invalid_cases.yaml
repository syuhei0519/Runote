- name: 投稿取得：存在しないIDを指定
  baseUrl: http://api-gateway:3000
  method: GET
  url: /posts/999999
  auth: true
  expect:
    status: 404

- name: 投稿登録：タイトル 省略 → 400
  baseUrl: http://api-gateway:3000
  method: POST
  url: /posts
  auth: true
  body:
    title: ""
    content: "Content only"
    emotionId: 1
  expect:
    status: 400
    bodyContains: "タイトルは必須です"

- name: 投稿登録：本文 省略 → 400
  baseUrl: http://api-gateway:3000
  method: POST
  url: /posts
  auth: true
  body:
    emotionId: 1
    content: ""
    title: "title"
  expect:
    status: 400
    bodyContains: "本文は必須です"

- name: 投稿登録：emotionId に存在しないID → 400 or 422
  baseUrl: http://api-gateway:3000
  method: POST
  url: /posts
  auth: true
  body:
    title: "Test post"
    content: "test content"
    emotionId: 9999
  expect:
    status: 422
    bodyContains: "emotionId"

- name: 投稿登録：認証ヘッダーなし → 401 Unauthorized
  baseUrl: http://api-gateway:3000
  method: POST
  url: /posts
  auth: false
  body:
    title: "Test"
    content: "Content"
    emotionId: 1
  expect:
    status: 401

# - name: 他人の投稿を更新 → 403
#   baseUrl: http://api-gateway:3000
#   method: PUT
#   url: /posts/2
#   auth: true
#   setup:
#     - setupOtherUserPost.ts
#   body:
#     title: "Hacked"
#     content: "不正更新"
#   expect:
#     status: 403
#     bodyContains: "forbidden"

- name: 投稿削除：認証済みだが存在しない投稿 → 404
  baseUrl: http://api-gateway:3000
  method: DELETE
  url: /posts/999999
  auth: true
  expect:
    status: 404
    bodyContains: "not found"